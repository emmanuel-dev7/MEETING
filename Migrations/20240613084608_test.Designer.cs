// <auto-generated />
using System;
using MEETING.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MEETING.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240613084608_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MEETING.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MEETING.lesClasses.Admin", b =>
                {
                    b.Property<int>("idAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idAdmin"));

                    b.Property<string>("nomAdmin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("passAdmin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idAdmin");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("MEETING.lesClasses.Article", b =>
                {
                    b.Property<int>("idArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idArticle"));

                    b.Property<string>("auteuridAuteur")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("conferenceidConf")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("justificatif")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("pathDocPdf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idArticle");

                    b.HasIndex("auteuridAuteur");

                    b.HasIndex("conferenceidConf");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("MEETING.lesClasses.ArticleRelu", b =>
                {
                    b.Property<int>("idArticleRelu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idArticleRelu"));

                    b.Property<int>("articleidArticle")
                        .HasColumnType("int");

                    b.Property<int>("critereFond")
                        .HasColumnType("int");

                    b.Property<int>("critereForme")
                        .HasColumnType("int");

                    b.Property<int>("criterePertinence")
                        .HasColumnType("int");

                    b.Property<int>("relecteuridRelec")
                        .HasColumnType("int");

                    b.HasKey("idArticleRelu");

                    b.HasIndex("articleidArticle");

                    b.HasIndex("relecteuridRelec");

                    b.ToTable("ArticleRelu");
                });

            modelBuilder.Entity("MEETING.lesClasses.Auteur", b =>
                {
                    b.Property<string>("idAuteur")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nomAuteur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("passwordAuteur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("prenomAuteur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("statut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("telephoneAuteur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("usernameAuteur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idAuteur");

                    b.ToTable("Auteur");
                });

            modelBuilder.Entity("MEETING.lesClasses.AuteurProvenance", b =>
                {
                    b.Property<int>("idAutoPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idAutoPro"));

                    b.Property<string>("auteuridAuteur")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("provenanceidPro")
                        .HasColumnType("int");

                    b.HasKey("idAutoPro");

                    b.HasIndex("auteuridAuteur");

                    b.HasIndex("provenanceidPro");

                    b.ToTable("AuteurProvenance");
                });

            modelBuilder.Entity("MEETING.lesClasses.Conference", b =>
                {
                    b.Property<int>("idConf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idConf"));

                    b.Property<DateTime>("debConference")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("debInscription")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("debResultat")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("debSoumission")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("finConference")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("finInscription")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("finResultat")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("finSoumission")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nomConf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("sigle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idConf");

                    b.ToTable("Conference");
                });

            modelBuilder.Entity("MEETING.lesClasses.Organisateur", b =>
                {
                    b.Property<string>("idOrga")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nomOrga")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("passwordOrga")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("prenomOrga")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("statut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("telephoneOrga")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("usernameOrga")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idOrga");

                    b.ToTable("Organisateur");
                });

            modelBuilder.Entity("MEETING.lesClasses.Participant", b =>
                {
                    b.Property<string>("idParti")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nomParti")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("passwordParti")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("prenomParti")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("statut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("telephoneParti")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("usernameParti")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idParti");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("MEETING.lesClasses.ParticipantConfe", b =>
                {
                    b.Property<int>("idParticipantConfe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idParticipantConfe"));

                    b.Property<string>("commentaire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("confeidConf")
                        .HasColumnType("int");

                    b.Property<string>("participeidParti")
                        .HasColumnType("varchar(255)");

                    b.HasKey("idParticipantConfe");

                    b.HasIndex("confeidConf");

                    b.HasIndex("participeidParti");

                    b.ToTable("ParticipantConfe");
                });

            modelBuilder.Entity("MEETING.lesClasses.Provenance", b =>
                {
                    b.Property<int>("idPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idPro"));

                    b.Property<string>("adressePro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("matPro")
                        .HasColumnType("int");

                    b.Property<string>("nomPro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idPro");

                    b.ToTable("Provenance");
                });

            modelBuilder.Entity("MEETING.lesClasses.Relecteur", b =>
                {
                    b.Property<int>("idRelec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idRelec"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nomRelec")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("passwordRelec")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("prenomRelec")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("specialite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("statut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("telephoneRelec")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("usernameRelec")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idRelec");

                    b.ToTable("Relecteur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MEETING.lesClasses.Article", b =>
                {
                    b.HasOne("MEETING.lesClasses.Auteur", "auteur")
                        .WithMany()
                        .HasForeignKey("auteuridAuteur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEETING.lesClasses.Conference", "conference")
                        .WithMany()
                        .HasForeignKey("conferenceidConf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auteur");

                    b.Navigation("conference");
                });

            modelBuilder.Entity("MEETING.lesClasses.ArticleRelu", b =>
                {
                    b.HasOne("MEETING.lesClasses.Article", "article")
                        .WithMany()
                        .HasForeignKey("articleidArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEETING.lesClasses.Relecteur", "relecteur")
                        .WithMany()
                        .HasForeignKey("relecteuridRelec")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("relecteur");
                });

            modelBuilder.Entity("MEETING.lesClasses.AuteurProvenance", b =>
                {
                    b.HasOne("MEETING.lesClasses.Auteur", "auteur")
                        .WithMany()
                        .HasForeignKey("auteuridAuteur");

                    b.HasOne("MEETING.lesClasses.Provenance", "provenance")
                        .WithMany()
                        .HasForeignKey("provenanceidPro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auteur");

                    b.Navigation("provenance");
                });

            modelBuilder.Entity("MEETING.lesClasses.ParticipantConfe", b =>
                {
                    b.HasOne("MEETING.lesClasses.Conference", "confe")
                        .WithMany()
                        .HasForeignKey("confeidConf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEETING.lesClasses.Participant", "participe")
                        .WithMany()
                        .HasForeignKey("participeidParti");

                    b.Navigation("confe");

                    b.Navigation("participe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MEETING.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MEETING.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEETING.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MEETING.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
